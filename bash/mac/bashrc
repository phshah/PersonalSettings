# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# -------------------------------------------------------------------------
# History Settings
# -------------------------------------------------------------------------

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# Save timestamps in history
HISTTIMEFORMAT="%F %T "
# -------------------------------------------------------------------------
#
# -------------------------------------------------------------------------

# Allow for ** to match any number of directories under the cwd
# shopt -s globstar

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it is compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
   else
	color_prompt=
    fi
fi

function PWD_SHORT {
tmp=${PWD%/*/*/*/*};
[ ${#tmp} -gt 0 -a "$tmp" != "$PWD" ] && echo ${PWD:${#tmp}+1} || echo $PWD;
}

if [ "$color_prompt" = yes ]; then
  # PS1='\[\e[0;36m\]\h:\[\e[1;37m\]\w:\[\e[1;34m\]\u\[\e[m\]$ '
  # PS1='\[\e[0;36m\]\h:\[\e[1;37m\]$(PWD_SHORT):\[\e[1;34m\]\u\[\e[m\]$ '
  #PS1='\t:\[\e[0;34m\]\u:\[\e[0;31m\]$(PWD_SHORT)\[\e[1;34m\]$\[\e[m\] '
  PS1='\[\e[0;34m\]\t:\[\e[0;31m\]$(PWD_SHORT)\[\e[1;34m\]$\[\e[m\] '

else
  PS1='\u@\h:$(PWD_SHORT)$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [[ -e /etc/bash_completion && -n ${PS1} ]]; then
#  source /etc/bash_completion
#fi

source /Users/phshah/.bashrc_common

export PATH=${PATH}:${HOME}/bin

# export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/pkg/cbase-1.3.5/lib
# export PATH=${PATH}:/pkg/misctools-2.5.5/bin
# export MANPATH=${MANPATH}:/pkg/misctools-2.5.5/share/man
# function ds () {
#   dirstack && cd "`cat "$HOME/.dirstacksel"`";
# }
# alias dspush='dirstack -pn'

# export PATH=/google/data/ro/users/jc/jch/git/stale/bin:$PATH

ANDROID_HOME=/Users/phshah/android-sdks
ANDROID_SDK_ROOT=/Users/phshah/android-sdks
export PATH=${PATH}:${ANDROID_SDK_ROOT}/tools:${ANDROID_SDK_ROOT}/platform-tools

function clearCastGserviceOverrides() {
  set -x -E
  adb root
  adb shell 'sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "DELETE FROM overrides where name LIKE \"gms:cast:%\""'
  set +x +E
}

function printGserviceOverrides() {
  set -x -E
  adb root
  adb shell 'sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "SELECT * FROM overrides"'
  set +x +E
}

function setupCastGServiceFlags() {
  set -x -E
  adb root
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:verbose_logging_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:debug_logging_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:dogfood_logging_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:remote_display_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:mirroring_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:cast_nearby_device_scanner:is_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:cast_nearby:is_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:cast_nearby:is_droidguard_enabled' 'true'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:cast_nearby:is_dogfood_feedback_enabled' 'false'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:cast_nearby:url' 'https://chromecast-dogfood.sandbox.google.com/cast/nearby'
  adb shell am broadcast -a 'com.google.gservices.intent.action.GSERVICES_OVERRIDE' -e 'gms:cast:cast_nearby_device_scanner:is_enabled' 'true'
  set +x +E
}

function restartGmsCore() {
  adb shell am force-stop com.google.android.gms
}
